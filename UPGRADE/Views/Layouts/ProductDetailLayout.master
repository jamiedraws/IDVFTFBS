<%@ Master Language="C#" Inherits="System.Web.Mvc.ViewMasterPage<ClientSiteViewData>" %>
<%@ Import Namespace="Dtm.Framework.ClientSites" %>
<%@ Import Namespace="Dtm.Framework.Base.Models" %>
<%@ Import Namespace="IDVFTFBS.Extensions" %>
<%@ Import Namespace="IDVFTFBS.CategoryRouter" %>
<%@ Import Namespace="IDVFTFBS.Classes" %>
<%@ Import Namespace="IDVFTFBS.CampaignProduct" %>
<%@ Import Namespace="IDVFTFBS.StructuredData" %>
<%@ Import Namespace="IDVFTFBS.Utils" %>

<%
    // the instance provided by the controller
    var categoryProductRouterEngine = ViewData["CategoryProductRouterEngine"] as CategoryProductRouterEngine ?? new CategoryProductRouterEngine();

    // the current category product object
    var categoryProduct = ViewData["CategoryProduct"] as CategoryProductRouter ?? categoryProductRouterEngine.GetCategoryProductByProductSlug(DtmContext.PageCode) ?? new CategoryProductRouter();

	// if current category product is invalid, redirect to products page
	if (!categoryProductRouterEngine.IsValidCategoryProductRouter(categoryProduct))
    {
		Response.Redirect("/products?cver=" + DtmContext.VersionId);
    }

    // the current parent product category name
    var productCategoryName = ViewData["ProductCategoryName"] as string ?? string.Empty;

    // the current parent product category route
    var productCategoryRoute = ViewData["ProductCategoryRoute"] as string ?? categoryProduct.RouteToProductCategoryPage ?? string.Empty;

    // the current product listing page route
    var productListingRoute = ViewData["ProductListingRoute"] as string ?? categoryProduct.RouteToProductListingPage ?? string.Empty;

    // the current product detail page route
    var productDetailRoute = ViewData["ProductDetailRoute"] as string ?? categoryProduct.RouteToProductDetailPage ?? string.Empty;

    // the current camapign category
    var category = ViewData["Category"] as CategoryView ?? categoryProduct.CampaignCategory ?? new CategoryView();

    // the current parent campaign category
    var parentCategory = categoryProductRouterEngine
        .ProductCategories
        .FirstOrDefault(pc => string.Equals(
            productCategoryRoute.Replace("/", string.Empty).ToLower(),
            pc.RedirectUrl,
            StringComparison.InvariantCultureIgnoreCase)
        ) ?? new CategoryView();

    // the current campaign product object
    var product = categoryProduct.CampaignProduct;

	// get the product name
	var productTitle = product.GetProductTitle();

    // represents the slug name of the product
    var productSlug = product.PropertyIndexer["UrlSlug"];

    // the images associated with the current campaign product
    var productImages = new ProductImages(productSlug, "images/UPGRADE/products/" + productSlug);

    // default product image path name if the custom image could not be found
    var defaultProductImagePath = "/images/UPGRADE/products/default.svg";

    // BazaarVoice product id
    var bazaarVoiceId = product.PropertyIndexer["BazaarVoiceID"];

    // determine if BazaarVoice Id exists
    var hasBazaarVoice = !string.IsNullOrWhiteSpace(bazaarVoiceId);

	var brandName = SettingsManager.ContextSettings["Label.ProductName"];

	string exclusiveImagePattern = product.PropertyIndexer["ExcludeProductDetailImageFileNamePattern"];
	bool hasExclusiveImagePattern = !string.IsNullOrEmpty(exclusiveImagePattern);

	List<string> exclusiveImagePatterns = hasExclusiveImagePattern 
		? exclusiveImagePattern.Split(',').Select(s => s.Trim()).ToList() 
		: new List<string>();

	if (hasExclusiveImagePattern)
    {
		exclusiveImagePatterns.ForEach(p => productImages.Images.RemoveAll(i => i.Contains(p)));
    }

	bool isStoreOpen = IDVFTFBS.Classes.SiteStatus.IsStoreOpen;
%>

<!DOCTYPE html>
<html id="dtm" lang="en" class="dtm">
  
	<head>

		<title><%= productTitle %></title>

        <%
            string description = product.MetaDescription ?? product.DisplayText;
            string productImage = productImages.SetFirstImageOrDefault(defaultProductImagePath);

            Html.RenderPartial("MetaFavicon", new ViewDataDictionary
            {
                { "Title", productTitle },
                { "Description", description },
                { "Url", categoryProduct.RouteToProductDetailPage },
                { "Image", productImage }
            });

            var productStructuredData = new IDVFTFBS.StructuredData.Product
            {
                Id = DtmContext.Domain.FullDomainCustomPath(categoryProduct.RouteToProductDetailPage),
                Name = productTitle,
                Description = description,
                Image = DtmContext.Domain.FullDomainCustomPath(productImage),
                Sku = product.ProductSku,
                Brand = brandName
            };

            Html.RenderPartial("StructuredDataJSONLD", new ViewDataDictionary
            {
                { "Type", "Product" },
                { "Product", productStructuredData }
            });

            var firstFallback = productImages.GetFirstFallbackImage();

            var defaultImage = !string.IsNullOrEmpty(firstFallback)
                ? productImages.FormatRelativeImagePath(firstFallback)
                : defaultProductImagePath;

            var firstNextGen = productImages.GetFirstNextGenImage();

            var anyWebps = !string.IsNullOrEmpty(firstNextGen) && firstNextGen.EndsWith(".webp");

            if (anyWebps)
            {
                var webpImage = productImages.FormatRelativeImagePath(firstNextGen);
				%>
				<link rel="preload" href="<%= webpImage %>" as="image" type="<%= productImages.GetMimeTypeByFileName(webpImage) %>" />
				<%
            }
            else
            {
				%>
				<link rel="preload" href="<%= defaultImage %>" as="image" />
				<%
            }

			var productCategoryPageName = parentCategory.Name ?? productCategoryName;
			var productCategoryBreadcrumbName = string.Format("All {0}", productCategoryPageName);

			var productListingBreadcrumbName = category.Name;

			var productDetailBreadcrumbName = categoryProduct.CampaignProduct.GetProductTitle();

			var breadcrumbs = new List<IDVFTFBS.StructuredData.ListItem>()
            {
				new IDVFTFBS.StructuredData.ListItem
                {
					Name = productCategoryBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productCategoryRoute)
                },
				new IDVFTFBS.StructuredData.ListItem
                {
					Name = productListingBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productListingRoute)
                },
				new IDVFTFBS.StructuredData.ListItem
                {
					Name = productDetailBreadcrumbName,
					Item = DtmContext.Domain.FullDomainCustomPath(productDetailRoute)
                }
            };

			Html.RenderPartial("StructuredDataJSONLD", new ViewDataDictionary
            {
                { "Type", "BreadcrumbList" },
                { "ListItems", breadcrumbs }
            });

			ResourceWriter resourceWriter = new ResourceWriter();

			Html.RenderPartial("GetVersionStyles", new ViewDataDictionary { { "ResourceWriter", resourceWriter } });

			Response.Write(resourceWriter.WriteStylePreload("css/UPGRADE/Site1/product-detail-page.css"));
			Response.Write(resourceWriter.WriteLink("css/UPGRADE/Site1/product-detail-page.css"));
		%>
	    
		<asp:ContentPlaceHolder ID="head" runat="server"></asp:ContentPlaceHolder>

	</head>

	<body class="dtm__in">

		<!-- // Header -->
		<%= Html.Partial("Header") %>

		<asp:ContentPlaceHolder ID="ProductHeroBanner" runat="server"></asp:ContentPlaceHolder>

		<!-- // Breadcrumbs -->
		<nav aria-label="Product category, listing and detail" class="view section section--breadcrumb">
			<div class="view__in section__in">
				<div class="breadcrumb">
					<a href="<%= productCategoryRoute %>?cver=<%= DtmContext.VersionId %>"><%= productCategoryBreadcrumbName %></a>
					<a href="<%= productListingRoute %>?cver=<%= DtmContext.VersionId %>#main"><%= productListingBreadcrumbName %></a>
					<a href="<%= productDetailRoute %>?cver=<%= DtmContext.VersionId %>"><%= productDetailBreadcrumbName %></a>
				</div>
			</div>
		</nav>

		<div data-variant-product-permalink="<%= productDetailRoute %>">
		<main aria-labelledby="main-title" class="view product product--detail section">
			<div id="main" class="view__anchor"></div>
			<div class="view__in section__in">
				<div class="product__group">
					<div class="product__media">
						<div data-variant-product-group="image">
							<%
                                List<string> images = productImages.GetFallbackImages(productImages.GetImagesExceptNamePattern("thumbnail"));

                                bool useImageCarousel = images.Count() > 1;

                                if (!useImageCarousel)
                                {
									%>
									<div class="product__image product__image-container">
										<%
											string image = images.FirstOrDefault();
											
											if (!string.IsNullOrEmpty(image))
											{
												Response.Write(productImages.BuildHTMLPictureElement(image));
											}
											else
											{
												%>
												<img src="<%= defaultImage %>" alt="" width="500" height="500"/>
												<%
											}

											if (product.IsProductNew() && product.DisplayNewTag())
											{
												%>
												<span class="product__new"><b>New</b></span>
												<%
											}
										%>
									</div>
									<%
                                }

								if (useImageCarousel)
								{
									%>
									<div class="slide slide--carousel slide--product-images">
										<div class="slide__container product__image">
											<section aria-label="Product image carousel" id="PDP-carousel" class="slide__into" tabindex="0" aria-live="polite">
												<%
													images.ForEach(image =>
													{
														int index = images.IndexOf(image);
											
														string id = string.Format("image-{0}", index);

														string name = productImages.GetImageFileName(image);

														bool isOffscreen = index != 0;
														%>
														<div id="<%= id %>" class="slide__item product__image-container">
															<%= productImages.BuildHTMLPictureElement(image, isOffscreen) %>
															<%
																if (product.IsProductNew() && name.EndsWith("NEW") && product.DisplayNewTag())
																{
																	%>
																	<span class="product__new"><b>New</b></span>
																	<%
																}	
															%>
														</div>
														<%
													});
												%>
												<asp:ContentPlaceHolder ID="ProductImageCarousel" runat="server"></asp:ContentPlaceHolder>
											</section>
										</div>
										<%	
											List<string> thumbnails = productImages.GetFallbackImages(productImages.GetImagesByNamePattern("thumbnail"));

											if (thumbnails.Any())
											{
												%>
												<nav aria-label="Product image thumbnails" class="slide__thumbnails">
												<%
												thumbnails.ForEach(thumbnail =>
												{
													int index = thumbnails.IndexOf(thumbnail);

													string idref = string.Format("image-{0}", index);

													string label = string.Format("Product image thumbnail {0}", index + 1);
													%>
													<a href="#<%= idref %>" data-slide-index="<%= index %>" class="slide__thumbnail" aria-label="<%= label %>">
														<%= productImages.BuildHTMLPictureElement(thumbnail, true) %>
													</a>
													<%
												});							
												%>
													<asp:ContentPlaceHolder ID="ProductImageCarouselThumbnail" runat="server"></asp:ContentPlaceHolder>
												</nav>
												<%
											}
										%>
									</div>							
									<%
								}
							%>
						</div>
					</div>

					<form class="product__info element-controller">
						<h1 id="main-title" class="product__title" data-variant-product-type="name"><%= productTitle %></h1>

						<div class="product__desc" data-variant-product-type="description"><%= product.DisplayText %></div>
					
						<% // BazaarVoice Stars & Reviews %>
						<%   
						if (hasBazaarVoice)
						{        
							var bvRedirectUrl = string.Format("{0}#reviews", DtmContext.Domain.FullDomainCustomPath(categoryProduct.RouteToProductDetailPage));    
							%>
							<div class="product__reviews">
								<div data-variant-product-type="bazaarvoice-inline-rating" class="contain contain--bazaarvoice-inline-rating">
									<div data-bv-show="rating_summary" data-bv-redirect-url="<%= bvRedirectUrl %>" data-bv-product-id="<%= bazaarVoiceId %>"></div>
								</div>
							</div>
						<%
							}
						%>

						<% if (isStoreOpen) { %>
						<div class="product__price"><span data-variant-product-type="price"><%= product.FormatPriceHTML() %></span></div>
						<% } %>

						<hr />

						<div data-variant-product-type="product-form">
							<asp:ContentPlaceHolder ID="ProductForm" runat="server"></asp:ContentPlaceHolder>
						</div>

						<%
							List<CampaignProductView> productOptions = product.GetVariantProducts();

							productOptions.Insert(0, product);

							string productCodesOrder = product.PropertyIndexer["AddToCartOrderByProductCodes", string.Empty];
							List<string> productOptionsOrder = productCodesOrder.Split(new [] {"|"}, StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()).ToList();

							productOptions = productOptions.OrderBy(x => productOptionsOrder.IndexOf(x.ProductCode)).ToList(); 

							productOptions.ForEach(productOption =>
                            {
								%>		
								<div class="product__cart">
									<%
										Html.RenderPartial("AddToCartWithQuantity", new ViewDataDictionary
										{
											{ "Product", productOption },
											{ "IsPDP", true }
										});
									%>
								</div>
								<%
                            });

							if (category.Code.Equals("BUNDLE"))
							{
								%>
								<small class="product__important-info">*Products will be itemized in cart, totaling the correct bundle price.</small>
								<%
							}
						%>

						<asp:ContentPlaceHolder ID="ProductFeatures" runat="server"></asp:ContentPlaceHolder>

						<% 
							List<CampaignProductView> relatedProducts = product.GetRelatedProductsByProductView().Where(cp => cp.IsProductLive()).ToList();

							relatedProducts.ForEach(relatedProduct =>
                            {
								%>
								<div class="product product--related">
									<div class="product__group">
										<div class="product__media">
											<div class="product__image">
											<%
												ProductImages relatedProductImages = new ProductImages(relatedProduct.ProductCode, "images/UPGRADE/products/" + relatedProduct.ProductCode);
												string relatedProductImage = relatedProductImages.GetFirstFallbackImage();

												bool hasRelatedProductImage = !string.IsNullOrEmpty(relatedProductImage);
												if (!hasRelatedProductImage)
												{
													%>
													<img src="<%= defaultProductImagePath %>" alt="" width="100" height="100"/>
													<%
												}

												if (hasRelatedProductImage)
												{
													Response.Write(relatedProductImages.BuildHTMLPictureElement(relatedProductImage, true));
												}
											%>
											</div>
										</div>
										<div class="product__info">
											<div class="product__block">
												<h2><%= relatedProduct.GetProductName() %></h2>
												<p><%= relatedProduct.DisplayText %></p>
											</div>
											<% if (isStoreOpen) { %>
											<div class="product__price"><%= relatedProduct.FormatPriceHTML() %></div>
											<% } %>
											<%
												string outOfStockText = relatedProduct.PropertyIndexer["OOSCustomerMessage", string.Empty];
												bool isOOS = relatedProduct.IsProductOutOfStock();

												string backInStockText = relatedProduct.PropertyIndexer["BackInStockMessage", string.Empty];

												if (!string.IsNullOrWhiteSpace(relatedProduct.AdditionalProductCode) && isOOS)
												{
													%>
													<b class="product__sku">Sku Number: <%= relatedProduct.AdditionalProductCode %></b>
													<%
												}

												if (!string.IsNullOrWhiteSpace(outOfStockText) && isOOS)
												{
													%>
													<strong class="product__oos"><%= outOfStockText %></strong>
													<%
												}

												if (!string.IsNullOrWhiteSpace(backInStockText) && !isOOS)
												{
													%>
													<strong class="product__message"><%= backInStockText %></strong>
													<%
												}
											%>
											<div class="product__cart">
											<%
												Html.RenderPartial("AddToCartWithQuantity", new ViewDataDictionary
												{
													{ "Product", relatedProduct },
													{ "IsPDP", true }
												});
											%>
											</div>
										</div>
									</div>
								</div>
								<%
                            });
						%>
					</form>
				</div>
			</div>
		</main>

		</div>

		<%
            var productSearch = new ProductSearch();

            var otherCustomerProducts = productSearch
                .GetSearchableProducts()
                .FilterByProductType()
                .FilterPdpProduct(product.ProductCode)
                .FilterByQuery(product.ProductName ?? String.Empty, true)
                .CampaignProducts
				.Select(cp => categoryProductRouterEngine.GetCategoryProductByCampaignProductView(cp))
            	.Where(cpr => categoryProductRouterEngine.IsValidCategoryProductRouter(cpr))
                .Take(3)
                .ToList();

            if (otherCustomerProducts.Count() > 0)
            {
				%>
				<section aria-labelledby="related-products-title" class="view product-grid product-grid--listing section">
					<div class="view__in section__in">
						<div class="section__block product-grid__header">
							<h2 id="related-products-title" class="product-grid__title">You May Also Like</h2>
						</div>
						<div class="section__block">
							<div class="product-grid__group">
							<%
                                foreach (var otherCustomerProduct in otherCustomerProducts)
                                {
                                    var index = otherCustomerProducts.IndexOf(otherCustomerProduct);

                                    Html.RenderPartial("CategoryProduct", new ViewDataDictionary
                                    {
                                        { "CategoryProductRouterEngine", categoryProductRouterEngine },
                                        { "CategoryProduct", otherCustomerProduct },
                                        { "IsPdpPage", "true" },
                                        { "Index", index },
										{ "RenderVariantProductRadioGroup", false }
                                    });
                                }
							%>
							</div>
						</div>
					</div>
				</section>
				<%
            }
		%>

		<% if (hasBazaarVoice) { %>
		<section aria-label="Reviews" class="view section">
			<div id="reviews" class="view__anchor"></div>
			<div class="view__in section__in">
				<div data-variant-product-type="bazaarvoice-reviews">
					<div data-bv-show="reviews" data-bv-product-id="<%= bazaarVoiceId %>"></div>
					<div data-bv-show="questions" data-bv-product-id="<%= bazaarVoiceId %>"></div>
				</div>
			</div>
		</section>
		<% } %>

		<!-- // Footer -->

        <%= Html.Partial("EmailOptIn") %>

		<%= Html.Partial("Footer") %>

        <%= Html.Partial("GetVersionScripts") %>

	</body>

</html>
